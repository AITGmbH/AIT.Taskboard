//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIT.Taskboard.Model.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AIT.Taskboard.Model.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not save updated configuration to file &apos;{0}&apos;....
        /// </summary>
        internal static string CouldNotSaveConfigFile {
            get {
                return ResourceManager.GetString("CouldNotSaveConfigFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation of license user name failed..
        /// </summary>
        internal static string LicenseRegistration_UserNameFailed {
            get {
                return ResourceManager.GetString("LicenseRegistration_UserNameFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This license key is not valid for current product version..
        /// </summary>
        internal static string LicenseRegistration_WrongVersion {
            get {
                return ResourceManager.GetString("LicenseRegistration_WrongVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license could not be activated. This happens when the number of activations exceed the maximum activations allowed by the license or when the license web service is not accessible..
        /// </summary>
        internal static string LicenseStatus_ActivationFailed {
            get {
                return ResourceManager.GetString("LicenseStatus_ActivationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The strong name verification of the LogicNP.CryptoLicensing.dll assembly failed..
        /// </summary>
        internal static string LicenseStatus_CryptoLicensingModuleTampered {
            get {
                return ResourceManager.GetString("LicenseStatus_CryptoLicensingModuleTampered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cumulative (over many runs) run-time of the software has exceeded the maximum allowed cumulative run-time specified by the license..
        /// </summary>
        internal static string LicenseStatus_CumulativeRunTimeExceeded {
            get {
                return ResourceManager.GetString("LicenseStatus_CumulativeRunTimeExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Date rollback was detected. This happens when the current date on the machine is earlier than the date on which the license is generated..
        /// </summary>
        internal static string LicenseStatus_DateRollbackDetected {
            get {
                return ResourceManager.GetString("LicenseStatus_DateRollbackDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license has been deactivated from the local machine. Attempting to use a deactivated license on the machine fails..
        /// </summary>
        internal static string LicenseStatus_Deactivated {
            get {
                return ResourceManager.GetString("LicenseStatus_Deactivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Managed or unmanaged debugger or tracer was detected during license validation..
        /// </summary>
        internal static string LicenseStatus_DebuggerDetected {
            get {
                return ResourceManager.GetString("LicenseStatus_DebuggerDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license validation was attempted under a domain different from those specified in the license..
        /// </summary>
        internal static string LicenseStatus_DomainInvalid {
            get {
                return ResourceManager.GetString("LicenseStatus_DomainInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The evaluation period has expired. This can happen when either the usage days, unique usage days, executions, instances, run-time or cumulative run-time is exceeded, or if evaluation tampering is detected..
        /// </summary>
        internal static string LicenseStatus_EvaluationExpired {
            get {
                return ResourceManager.GetString("LicenseStatus_EvaluationExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The evaluation has been tampered. This happens when the user attempts to extend the evaluation time by setting the local date-time of the computer..
        /// </summary>
        internal static string LicenseStatus_EvaluationlTampered {
            get {
                return ResourceManager.GetString("LicenseStatus_EvaluationlTampered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of executions have exceeded. This happens when the number of executions of the software exceeds the maximum allowed executions specified by the license..
        /// </summary>
        internal static string LicenseStatus_ExecutionsExceeded {
            get {
                return ResourceManager.GetString("LicenseStatus_ExecutionsExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license has expired. This happens when the local time is greater than the date of expiration specified by the license..
        /// </summary>
        internal static string LicenseStatus_Expired {
            get {
                return ResourceManager.GetString("LicenseStatus_Expired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic failure occurred while validating the license..
        /// </summary>
        internal static string LicenseStatus_GenericFailure {
            get {
                return ResourceManager.GetString("LicenseStatus_GenericFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host assembly is different from the host assembly data embedded in the license..
        /// </summary>
        internal static string LicenseStatus_HostAssemblyDifferent {
            get {
                return ResourceManager.GetString("LicenseStatus_HostAssemblyDifferent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of instances of the software have exceeded. This happens when the number of instances of the host application exceeds the maximum allowed instances specified by the license..
        /// </summary>
        internal static string LicenseStatus_InstancesExceeded {
            get {
                return ResourceManager.GetString("LicenseStatus_InstancesExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license validation failed in one or more respects. Depending on the condition that caused the validation to fail, one or more of the remaining flags are also set..
        /// </summary>
        internal static string LicenseStatus_InValid {
            get {
                return ResourceManager.GetString("LicenseStatus_InValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local system time differs from the time returned by the license service by more than 4 hours..
        /// </summary>
        internal static string LicenseStatus_LocalTimeInvalid {
            get {
                return ResourceManager.GetString("LicenseStatus_LocalTimeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The machine code embedded in the license is invalid - that is, it does not match the local machine code..
        /// </summary>
        internal static string LicenseStatus_MachineCodeInvalid {
            get {
                return ResourceManager.GetString("LicenseStatus_MachineCodeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License  is not yet validated..
        /// </summary>
        internal static string LicenseStatus_NotValidated {
            get {
                return ResourceManager.GetString("LicenseStatus_NotValidated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host software is running in a remote session like that of Remote Desktop, Terminal Services or Citrix..
        /// </summary>
        internal static string LicenseStatus_RemoteSessionDetected {
            get {
                return ResourceManager.GetString("LicenseStatus_RemoteSessionDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The run-time of the software has exceeded the maximum allowed run-time specified by the license..
        /// </summary>
        internal static string LicenseStatus_RunTimeExceeded {
            get {
                return ResourceManager.GetString("LicenseStatus_RunTimeExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The serial code is invalid..
        /// </summary>
        internal static string LicenseStatus_SerialCodeInvalid {
            get {
                return ResourceManager.GetString("LicenseStatus_SerialCodeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The notification of the validation to the license service failed..
        /// </summary>
        internal static string LicenseStatus_ServiceNotificationFailed {
            get {
                return ResourceManager.GetString("LicenseStatus_ServiceNotificationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cryptographic signature is invalid..
        /// </summary>
        internal static string LicenseStatus_SignatureInvalid {
            get {
                return ResourceManager.GetString("LicenseStatus_SignatureInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The strong name verification of the host assembly failed..
        /// </summary>
        internal static string LicenseStatus_StrongNameVerificationFailed {
            get {
                return ResourceManager.GetString("LicenseStatus_StrongNameVerificationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The unique usage days have exceeded. This happens when the number of unique days that the software was used on exceeds the maximum allowed unique usage days specified by the license..
        /// </summary>
        internal static string LicenseStatus_UniqueUsageDaysExceeded {
            get {
                return ResourceManager.GetString("LicenseStatus_UniqueUsageDaysExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The usage days have exceeded. This happens when the number of days passed since the first time the license was used exceeds the maximum allowed usage days specified by the license..
        /// </summary>
        internal static string LicenseStatus_UsageDaysExceeded {
            get {
                return ResourceManager.GetString("LicenseStatus_UsageDaysExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license usage mode is invalid. This happens when a license not marked as &apos;valid at design-time&apos; is used at design-time or a license not marked as &apos;valid at run-time&apos; is used at run-time..
        /// </summary>
        internal static string LicenseStatus_UsageModeInvalid {
            get {
                return ResourceManager.GetString("LicenseStatus_UsageModeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license is valid in all respects..
        /// </summary>
        internal static string LicenseStatus_Valid {
            get {
                return ResourceManager.GetString("LicenseStatus_Valid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{0}&apos; is invalid ({1})..
        /// </summary>
        internal static string WorkItemIssueDetailInvalidField {
            get {
                return ResourceManager.GetString("WorkItemIssueDetailInvalidField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No changes to publish.
        /// </summary>
        internal static string WorkItemIssueStatusNoChangesToPublish {
            get {
                return ResourceManager.GetString("WorkItemIssueStatusNoChangesToPublish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not Published.
        /// </summary>
        internal static string WorkItemIssueStatusNotPublished {
            get {
                return ResourceManager.GetString("WorkItemIssueStatusNotPublished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ready To Publish.
        /// </summary>
        internal static string WorkItemIssueStatusReadyToPublish {
            get {
                return ResourceManager.GetString("WorkItemIssueStatusReadyToPublish", resourceCulture);
            }
        }
    }
}
