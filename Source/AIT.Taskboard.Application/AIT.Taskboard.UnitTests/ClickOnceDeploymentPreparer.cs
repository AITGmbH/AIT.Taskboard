using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml;

namespace AIT.Taskboard.UnitTests
{
    /// <summary>
    /// </summary>
    public class ClickOnceDeploymentPreparer
    {
        #region Constants

        private const string ProjectFileNamespace = "http://schemas.microsoft.com/developer/msbuild/2003";
        private const string AutoGeneratedLabel = "AutoGenerated";

        #endregion

        #region Fields

        private readonly string _projectFileName;
        private string _baseDirectory;
        private string _projectFileFullName;

        #endregion

        #region Properties

        private string BaseDirectory
        {
            get
            {
                if (string.IsNullOrEmpty(_baseDirectory))
                {
                    if (!string.IsNullOrEmpty(ProjectFileFullName))
                    {
                        var projectFileInfo = new FileInfo(ProjectFileFullName);
                        var projectFileDirectory = projectFileInfo.Directory;
                        var baseDirectoryInfo = projectFileDirectory;

                        for (var i = 0; i < 3; i++)
                        {
                            if (baseDirectoryInfo != null)
                            {
                                baseDirectoryInfo = baseDirectoryInfo.Parent;
                            }
                        }

                        if (baseDirectoryInfo != null)
                        {
                            _baseDirectory = baseDirectoryInfo.FullName + @"\";
                        }
                    }
                }

                return _baseDirectory;
            }
        }


        /// <summary>
        ///   Gets the name of the project file including path.
        /// </summary>
        private string ProjectFileFullName
        {
            get
            {
                if (string.IsNullOrEmpty(_projectFileFullName))
                {
                    var projectFileInfo = SearchFile(new DirectoryInfo(Directory.GetCurrentDirectory()),
                                                     _projectFileName);

                    _projectFileFullName = projectFileInfo.FullName;
                }

                return _projectFileFullName;
            }
        }


        private string BaseDirectoryRelative
        {
            get
            {
                var baseDirectoryRelative = string.Empty;
                var folder = ProjectFileFullName.Replace(BaseDirectory, "");
                var folders = folder.Split(new[] { @"\" }, StringSplitOptions.RemoveEmptyEntries);

                for (var i = 0; i < folders.Length - 1; i++)
                {
                    baseDirectoryRelative += @"..\";
                }

                return baseDirectoryRelative;
            }
        }

        #endregion

        public ClickOnceDeploymentPreparer(string projectFileName)
        {
            _projectFileName = projectFileName;
        }

        #region Private Functions

        private static FileInfo SearchFile(DirectoryInfo directoryInfo, string fileName)
        {
            var files = directoryInfo.EnumerateFiles(fileName, SearchOption.AllDirectories).ToArray();

            if ((files != null) && (files.Length > 0))
            {
                return files[0];
            }

            return directoryInfo.Parent != null ? SearchFile(directoryInfo.Parent, fileName) : null;
        }


        public void AddContentItemsToClickOnceApplication(IEnumerable<string> excludes)
        {
            if (File.Exists(ProjectFileFullName))
            {
                var projectFile = new FileInfo(ProjectFileFullName);

                if (!projectFile.IsReadOnly)
                {
                    var document = new XmlDocument();
                    document.Load(ProjectFileFullName);

                    var contentNode = FindItemGroupContainingContentItems(document);

                    if (contentNode != null)
                    {
                        contentNode.RemoveAll();
                        var labelAttribute = document.CreateAttribute("Label");
                        labelAttribute.Value = AutoGeneratedLabel;
                        contentNode.Attributes.Append(labelAttribute);

                        AddContentItemsToClickOnceApplication(contentNode, new DirectoryInfo(BaseDirectory + @"Bin\"),
                                                              excludes);

                        document.Save(ProjectFileFullName);
                    }
                }
            }
        }

        private void AddContentItemsToClickOnceApplication(XmlNode itemGroupNode, DirectoryInfo binariesDirectory,
                                                           IEnumerable<string> excludes)
        {
            foreach (var fileInfo in binariesDirectory.EnumerateFiles())
            {
                var include = excludes.All(exclude => !Regex.IsMatch(fileInfo.FullName, exclude, RegexOptions.Multiline));

                if (include)
                {
                    var contentNode = itemGroupNode.OwnerDocument.CreateNode(XmlNodeType.Element, "Content",
                                                                             ProjectFileNamespace);
                    var includeAttribute = itemGroupNode.OwnerDocument.CreateAttribute("Include");
                    var directory =
                        binariesDirectory.FullName.Replace(BaseDirectory, string.Empty).Trim('\\').Remove(0, 3).Trim(
                            '\\');

                    if (!string.IsNullOrEmpty(directory))
                    {
                        directory += @"\";
                    }

                    includeAttribute.Value = BaseDirectoryRelative + @"Bin\" + directory + fileInfo.Name;
                    contentNode.Attributes.Append(includeAttribute);

                    var serviceLinkNode = itemGroupNode.OwnerDocument.CreateNode(XmlNodeType.Element, "Link",
                                                                                 ProjectFileNamespace);
                    serviceLinkNode.InnerText = directory + fileInfo.Name;
                    contentNode.AppendChild(serviceLinkNode);

                    itemGroupNode.AppendChild(contentNode);
                }
            }

            foreach (var subDirectory in binariesDirectory.EnumerateDirectories())
            {
                AddContentItemsToClickOnceApplication(itemGroupNode, subDirectory, excludes);
            }
        }


        private static XmlNode FindItemGroupContainingContentItems(XmlNode node)
        {
            XmlNode itemGroupNode = null;

            if (node.Name == "ItemGroup")
            {
                if (node.Attributes["Label"] != null)
                {
                    if (node.Attributes["Label"].Value == AutoGeneratedLabel)
                    {
                        return node;
                    }
                }
            }
            else
            {
                foreach (XmlNode childNode in node.ChildNodes)
                {
                    itemGroupNode = FindItemGroupContainingContentItems(childNode);

                    if (itemGroupNode != null)
                    {
                        return itemGroupNode;
                    }
                }
            }

            return itemGroupNode;
        }

        #endregion
    }
}